
ADC_DMA_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f18  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003128  08003128  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003130  08003130  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000000c  08003144  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003144  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f15b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c6  00000000  00000000  0002f195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00031560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00032230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027824  00000000  00000000  00032dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103d3  00000000  00000000  0005a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f76ba  00000000  00000000  0006a9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162089  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  001620dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080030f8 	.word	0x080030f8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080030f8 	.word	0x080030f8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800054e:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <MX_ADC1_Init+0xc8>)
 8000550:	4a2a      	ldr	r2, [pc, #168]	; (80005fc <MX_ADC1_Init+0xcc>)
 8000552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <MX_ADC1_Init+0xc8>)
 8000556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800055a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_ADC1_Init+0xc8>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <MX_ADC1_Init+0xc8>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <MX_ADC1_Init+0xc8>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_ADC1_Init+0xc8>)
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <MX_ADC1_Init+0xc8>)
 8000578:	2200      	movs	r2, #0
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_ADC1_Init+0xc8>)
 800057e:	4a20      	ldr	r2, [pc, #128]	; (8000600 <MX_ADC1_Init+0xd0>)
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <MX_ADC1_Init+0xc8>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_ADC1_Init+0xc8>)
 800058a:	2201      	movs	r2, #1
 800058c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_ADC1_Init+0xc8>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_ADC1_Init+0xc8>)
 8000598:	2201      	movs	r2, #1
 800059a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	4816      	ldr	r0, [pc, #88]	; (80005f8 <MX_ADC1_Init+0xc8>)
 800059e:	f001 f81d 	bl	80015dc <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80005a8:	f000 fd84 	bl	80010b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80005ac:	2316      	movs	r3, #22
 80005ae:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 80005b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005b4:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <MX_ADC1_Init+0xc8>)
 80005c2:	f001 fa9f 	bl	8001b04 <HAL_ADCEx_MultiModeConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005cc:	f000 fd72 	bl	80010b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_ADC1_Init+0xc8>)
 80005e2:	f001 f83f 	bl	8001664 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80005ec:	f000 fd62 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000d0 	.word	0x200000d0
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_ADC2_Init+0x8c>)
 8000618:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <MX_ADC2_Init+0x90>)
 800061a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_ADC2_Init+0x8c>)
 800061e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000622:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_ADC2_Init+0x8c>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_ADC2_Init+0x8c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_ADC2_Init+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_ADC2_Init+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_ADC2_Init+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_ADC2_Init+0x8c>)
 8000646:	2201      	movs	r2, #1
 8000648:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_ADC2_Init+0x8c>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_ADC2_Init+0x8c>)
 8000654:	2201      	movs	r2, #1
 8000656:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <MX_ADC2_Init+0x8c>)
 800065a:	f000 ffbf 	bl	80015dc <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8000664:	f000 fd26 	bl	80010b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000668:	2302      	movs	r3, #2
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066c:	2301      	movs	r3, #1
 800066e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_ADC2_Init+0x8c>)
 800067a:	f000 fff3 	bl	8001664 <HAL_ADC_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000684:	f000 fd16 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000028 	.word	0x20000028
 8000694:	40012100 	.word	0x40012100

08000698 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006ac:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <MX_ADC3_Init+0x90>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006b6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <MX_ADC3_Init+0x8c>)
 80006ee:	f000 ff75 	bl	80015dc <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80006f8:	f000 fcdc 	bl	80010b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_ADC3_Init+0x8c>)
 800070e:	f000 ffa9 	bl	8001664 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000718:	f000 fccc 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000118 	.word	0x20000118
 8000728:	40012200 	.word	0x40012200

0800072c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a94      	ldr	r2, [pc, #592]	; (800099c <HAL_ADC_MspInit+0x270>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d15c      	bne.n	8000808 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800074e:	4b94      	ldr	r3, [pc, #592]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a93      	ldr	r2, [pc, #588]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b91      	ldr	r3, [pc, #580]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000762:	623b      	str	r3, [r7, #32]
 8000764:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b8e      	ldr	r3, [pc, #568]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a8d      	ldr	r2, [pc, #564]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b8b      	ldr	r3, [pc, #556]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
 800077c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800077e:	2301      	movs	r3, #1
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4884      	ldr	r0, [pc, #528]	; (80009a4 <HAL_ADC_MspInit+0x278>)
 8000792:	f001 fc6d 	bl	8002070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000796:	4b84      	ldr	r3, [pc, #528]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 8000798:	4a84      	ldr	r2, [pc, #528]	; (80009ac <HAL_ADC_MspInit+0x280>)
 800079a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800079c:	4b82      	ldr	r3, [pc, #520]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a2:	4b81      	ldr	r3, [pc, #516]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a8:	4b7f      	ldr	r3, [pc, #508]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007ae:	4b7e      	ldr	r3, [pc, #504]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007b6:	4b7c      	ldr	r3, [pc, #496]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007be:	4b7a      	ldr	r3, [pc, #488]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007c6:	4b78      	ldr	r3, [pc, #480]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ce:	4b76      	ldr	r3, [pc, #472]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007d4:	4b74      	ldr	r3, [pc, #464]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007da:	4873      	ldr	r0, [pc, #460]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007dc:	f001 fae8 	bl	8001db0 <HAL_DMA_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80007e6:	f000 fc65 	bl	80010b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a6e      	ldr	r2, [pc, #440]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007ee:	639a      	str	r2, [r3, #56]	; 0x38
 80007f0:	4a6d      	ldr	r2, [pc, #436]	; (80009a8 <HAL_ADC_MspInit+0x27c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2012      	movs	r0, #18
 80007fc:	f001 faa1 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000800:	2012      	movs	r0, #18
 8000802:	f001 faba 	bl	8001d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000806:	e0c4      	b.n	8000992 <HAL_ADC_MspInit+0x266>
  else if(adcHandle->Instance==ADC2)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a68      	ldr	r2, [pc, #416]	; (80009b0 <HAL_ADC_MspInit+0x284>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d15d      	bne.n	80008ce <HAL_ADC_MspInit+0x1a2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000812:	4b63      	ldr	r3, [pc, #396]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a62      	ldr	r2, [pc, #392]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b60      	ldr	r3, [pc, #384]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b5d      	ldr	r3, [pc, #372]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a5c      	ldr	r2, [pc, #368]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b5a      	ldr	r3, [pc, #360]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000842:	2304      	movs	r3, #4
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000846:	2303      	movs	r3, #3
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	4853      	ldr	r0, [pc, #332]	; (80009a4 <HAL_ADC_MspInit+0x278>)
 8000856:	f001 fc0b 	bl	8002070 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800085a:	4b56      	ldr	r3, [pc, #344]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 800085c:	4a56      	ldr	r2, [pc, #344]	; (80009b8 <HAL_ADC_MspInit+0x28c>)
 800085e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000860:	4b54      	ldr	r3, [pc, #336]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 8000862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000866:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000868:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800086e:	4b51      	ldr	r3, [pc, #324]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000874:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 8000876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800087c:	4b4d      	ldr	r3, [pc, #308]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 800087e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000882:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000884:	4b4b      	ldr	r3, [pc, #300]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 8000886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800088a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800088c:	4b49      	ldr	r3, [pc, #292]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 800088e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000892:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000894:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800089a:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80008a0:	4844      	ldr	r0, [pc, #272]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 80008a2:	f001 fa85 	bl	8001db0 <HAL_DMA_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 80008ac:	f000 fc02 	bl	80010b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a40      	ldr	r2, [pc, #256]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
 80008b6:	4a3f      	ldr	r2, [pc, #252]	; (80009b4 <HAL_ADC_MspInit+0x288>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2012      	movs	r0, #18
 80008c2:	f001 fa3e 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008c6:	2012      	movs	r0, #18
 80008c8:	f001 fa57 	bl	8001d7a <HAL_NVIC_EnableIRQ>
}
 80008cc:	e061      	b.n	8000992 <HAL_ADC_MspInit+0x266>
  else if(adcHandle->Instance==ADC3)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a3a      	ldr	r2, [pc, #232]	; (80009bc <HAL_ADC_MspInit+0x290>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d15c      	bne.n	8000992 <HAL_ADC_MspInit+0x266>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008d8:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	4a30      	ldr	r2, [pc, #192]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e2:	6453      	str	r3, [r2, #68]	; 0x44
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 80008e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a2a      	ldr	r2, [pc, #168]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 80008f6:	f043 0320 	orr.w	r3, r3, #32
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <HAL_ADC_MspInit+0x274>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0320 	and.w	r3, r3, #32
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <HAL_ADC_MspInit+0x294>)
 800091c:	f001 fba8 	bl	8002070 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 8000922:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <HAL_ADC_MspInit+0x29c>)
 8000924:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 8000928:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800092c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 800093c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000940:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 8000944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000948:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 800094c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000950:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 8000954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000958:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000966:	4817      	ldr	r0, [pc, #92]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 8000968:	f001 fa22 	bl	8001db0 <HAL_DMA_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_ADC_MspInit+0x24a>
      Error_Handler();
 8000972:	f000 fb9f 	bl	80010b4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 800097a:	639a      	str	r2, [r3, #56]	; 0x38
 800097c:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <HAL_ADC_MspInit+0x298>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2012      	movs	r0, #18
 8000988:	f001 f9db 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800098c:	2012      	movs	r0, #18
 800098e:	f001 f9f4 	bl	8001d7a <HAL_NVIC_EnableIRQ>
}
 8000992:	bf00      	nop
 8000994:	3738      	adds	r7, #56	; 0x38
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40012000 	.word	0x40012000
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000
 80009a8:	20000160 	.word	0x20000160
 80009ac:	40026410 	.word	0x40026410
 80009b0:	40012100 	.word	0x40012100
 80009b4:	200001c0 	.word	0x200001c0
 80009b8:	40026440 	.word	0x40026440
 80009bc:	40012200 	.word	0x40012200
 80009c0:	40021400 	.word	0x40021400
 80009c4:	20000070 	.word	0x20000070
 80009c8:	40026428 	.word	0x40026428

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_DMA_Init+0x58>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <MX_DMA_Init+0x58>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_DMA_Init+0x58>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2038      	movs	r0, #56	; 0x38
 80009f0:	f001 f9a7 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009f4:	2038      	movs	r0, #56	; 0x38
 80009f6:	f001 f9c0 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2039      	movs	r0, #57	; 0x39
 8000a00:	f001 f99f 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a04:	2039      	movs	r0, #57	; 0x39
 8000a06:	f001 f9b8 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	203a      	movs	r0, #58	; 0x3a
 8000a10:	f001 f997 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a14:	203a      	movs	r0, #58	; 0x3a
 8000a16:	f001 f9b0 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a44:	f043 0320 	orr.w	r3, r3, #32
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_GPIO_Init+0xa8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <MX_GPIO_Init+0xac>)
 8000aa6:	f001 fc8f 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000aaa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_GPIO_Init+0xac>)
 8000ac4:	f001 fad4 	bl	8002070 <HAL_GPIO_Init>

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f000 fd20 	bl	8001522 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 f96f 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f7ff ff9f 	bl	8000a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aea:	f7ff ff6f 	bl	80009cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000aee:	f7ff fd1f 	bl	8000530 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000af2:	f7ff fd87 	bl	8000604 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000af6:	f7ff fdcf 	bl	8000698 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000afa:	f000 fc8d 	bl	8001418 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  sTimerClocks_t sTimerClocks = {0u};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
  vCalcTimerClocks(&sTimerClocks);
 8000b06:	463b      	mov	r3, r7
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f9c9 	bl	8000ea0 <vCalcTimerClocks>

  //ADC
  // Generate ADC Interrupt for Injected channels
  hadc1.Instance->CR1 |= ADC_CR1_JEOCIE | ADC_CR1_EOCIE;
 8000b0e:	4b8d      	ldr	r3, [pc, #564]	; (8000d44 <main+0x26c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	4b8b      	ldr	r3, [pc, #556]	; (8000d44 <main+0x26c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8000b1c:	605a      	str	r2, [r3, #4]
  hadc2.Instance->CR1 |= ADC_CR1_JEOCIE | ADC_CR1_EOCIE;
 8000b1e:	4b8a      	ldr	r3, [pc, #552]	; (8000d48 <main+0x270>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	4b88      	ldr	r3, [pc, #544]	; (8000d48 <main+0x270>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc3.Instance->CR1 |= ADC_CR1_JEOCIE | ADC_CR1_EOCIE;
 8000b2e:	4b87      	ldr	r3, [pc, #540]	; (8000d4c <main+0x274>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	4b85      	ldr	r3, [pc, #532]	; (8000d4c <main+0x274>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8000b3c:	605a      	str	r2, [r3, #4]

  // Power on ADCs
  hadc1.Instance->CR2 |= ADC_CR2_ADON | ADC_CR2_DMA | ADC_CR2_DDS;
 8000b3e:	4b81      	ldr	r3, [pc, #516]	; (8000d44 <main+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6899      	ldr	r1, [r3, #8]
 8000b44:	4b7f      	ldr	r3, [pc, #508]	; (8000d44 <main+0x26c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	f240 3301 	movw	r3, #769	; 0x301
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	6093      	str	r3, [r2, #8]
  hadc2.Instance->CR2 |= ADC_CR2_ADON | ADC_CR2_DMA | ADC_CR2_DDS;
 8000b50:	4b7d      	ldr	r3, [pc, #500]	; (8000d48 <main+0x270>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6899      	ldr	r1, [r3, #8]
 8000b56:	4b7c      	ldr	r3, [pc, #496]	; (8000d48 <main+0x270>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	f240 3301 	movw	r3, #769	; 0x301
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	6093      	str	r3, [r2, #8]
  hadc3.Instance->CR2 |= ADC_CR2_ADON | ADC_CR2_DMA | ADC_CR2_DDS;
 8000b62:	4b7a      	ldr	r3, [pc, #488]	; (8000d4c <main+0x274>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6899      	ldr	r1, [r3, #8]
 8000b68:	4b78      	ldr	r3, [pc, #480]	; (8000d4c <main+0x274>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	f240 3301 	movw	r3, #769	; 0x301
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6093      	str	r3, [r2, #8]

  hadc1.DMA_Handle->Instance->CR &= ~(DMA_SxCR_EN);
 8000b74:	4b73      	ldr	r3, [pc, #460]	; (8000d44 <main+0x26c>)
 8000b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b71      	ldr	r3, [pc, #452]	; (8000d44 <main+0x26c>)
 8000b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0201 	bic.w	r2, r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
  while(hadc1.DMA_Handle->Instance->CR & DMA_SxCR_EN);
 8000b88:	bf00      	nop
 8000b8a:	4b6e      	ldr	r3, [pc, #440]	; (8000d44 <main+0x26c>)
 8000b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f7      	bne.n	8000b8a <main+0xb2>

  DMA2->LIFCR = 0x0F7D0F7D;
 8000b9a:	4b6d      	ldr	r3, [pc, #436]	; (8000d50 <main+0x278>)
 8000b9c:	4a6d      	ldr	r2, [pc, #436]	; (8000d54 <main+0x27c>)
 8000b9e:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0x0F7D0F7D;
 8000ba0:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <main+0x278>)
 8000ba2:	4a6c      	ldr	r2, [pc, #432]	; (8000d54 <main+0x27c>)
 8000ba4:	60da      	str	r2, [r3, #12]

  hadc1.DMA_Handle->Instance->CR &= ~(DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE);
 8000ba6:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <main+0x26c>)
 8000ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b65      	ldr	r3, [pc, #404]	; (8000d44 <main+0x26c>)
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 021e 	bic.w	r2, r2, #30
 8000bb8:	601a      	str	r2, [r3, #0]
  hadc1.DMA_Handle->Instance->CR |= (DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_DBM);
 8000bba:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <main+0x26c>)
 8000bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6819      	ldr	r1, [r3, #0]
 8000bc2:	4b60      	ldr	r3, [pc, #384]	; (8000d44 <main+0x26c>)
 8000bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b63      	ldr	r3, [pc, #396]	; (8000d58 <main+0x280>)
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6013      	str	r3, [r2, #0]
  hadc1.DMA_Handle->Instance->M0AR = (uint32_t)(&(au16Val1[0u][0u]));
 8000bce:	4b5d      	ldr	r3, [pc, #372]	; (8000d44 <main+0x26c>)
 8000bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a61      	ldr	r2, [pc, #388]	; (8000d5c <main+0x284>)
 8000bd6:	60da      	str	r2, [r3, #12]
  hadc1.DMA_Handle->Instance->M1AR = (uint32_t)(&(au16Val2[0u][0u]));
 8000bd8:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <main+0x26c>)
 8000bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a60      	ldr	r2, [pc, #384]	; (8000d60 <main+0x288>)
 8000be0:	611a      	str	r2, [r3, #16]
  hadc1.DMA_Handle->Instance->NDTR = BUF_LEN;
 8000be2:	4b58      	ldr	r3, [pc, #352]	; (8000d44 <main+0x26c>)
 8000be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2204      	movs	r2, #4
 8000bea:	605a      	str	r2, [r3, #4]
  hadc1.DMA_Handle->Instance->PAR = (uint32_t)(&hadc1.Instance->DR);
 8000bec:	4b55      	ldr	r3, [pc, #340]	; (8000d44 <main+0x26c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8000bf4:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <main+0x26c>)
 8000bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	609a      	str	r2, [r3, #8]

  hadc1.DMA_Handle->Instance->CR |= (DMA_SxCR_EN);
 8000bfc:	4b51      	ldr	r3, [pc, #324]	; (8000d44 <main+0x26c>)
 8000bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <main+0x26c>)
 8000c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 0201 	orr.w	r2, r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]

  hadc2.DMA_Handle->Instance->CR &= ~(DMA_SxCR_EN);
 8000c10:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <main+0x270>)
 8000c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <main+0x270>)
 8000c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0201 	bic.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
  while(hadc2.DMA_Handle->Instance->CR & DMA_SxCR_EN);
 8000c24:	bf00      	nop
 8000c26:	4b48      	ldr	r3, [pc, #288]	; (8000d48 <main+0x270>)
 8000c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f7      	bne.n	8000c26 <main+0x14e>

  DMA2->LIFCR = 0x0F7D0F7D;
 8000c36:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <main+0x278>)
 8000c38:	4a46      	ldr	r2, [pc, #280]	; (8000d54 <main+0x27c>)
 8000c3a:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0x0F7D0F7D;
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <main+0x278>)
 8000c3e:	4a45      	ldr	r2, [pc, #276]	; (8000d54 <main+0x27c>)
 8000c40:	60da      	str	r2, [r3, #12]

  hadc2.DMA_Handle->Instance->CR &= ~(DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE);
 8000c42:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <main+0x270>)
 8000c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b3f      	ldr	r3, [pc, #252]	; (8000d48 <main+0x270>)
 8000c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 021e 	bic.w	r2, r2, #30
 8000c54:	601a      	str	r2, [r3, #0]
  hadc2.DMA_Handle->Instance->CR |= (DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_DBM);
 8000c56:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <main+0x270>)
 8000c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6819      	ldr	r1, [r3, #0]
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <main+0x270>)
 8000c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <main+0x280>)
 8000c66:	430b      	orrs	r3, r1
 8000c68:	6013      	str	r3, [r2, #0]
  hadc2.DMA_Handle->Instance->M0AR = (uint32_t)(&(au16Val1[1u][0u]));
 8000c6a:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <main+0x270>)
 8000c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a3c      	ldr	r2, [pc, #240]	; (8000d64 <main+0x28c>)
 8000c72:	60da      	str	r2, [r3, #12]
  hadc2.DMA_Handle->Instance->M1AR = (uint32_t)(&(au16Val2[1u][0u]));
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <main+0x270>)
 8000c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a3b      	ldr	r2, [pc, #236]	; (8000d68 <main+0x290>)
 8000c7c:	611a      	str	r2, [r3, #16]
  hadc2.DMA_Handle->Instance->NDTR = BUF_LEN;
 8000c7e:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <main+0x270>)
 8000c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2204      	movs	r2, #4
 8000c86:	605a      	str	r2, [r3, #4]
  hadc2.DMA_Handle->Instance->PAR = (uint32_t)(&hadc2.Instance->DR);
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <main+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <main+0x270>)
 8000c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	609a      	str	r2, [r3, #8]

  hadc2.DMA_Handle->Instance->CR |= (DMA_SxCR_EN);
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <main+0x270>)
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <main+0x270>)
 8000ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0201 	orr.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

  hadc3.DMA_Handle->Instance->CR &= ~(DMA_SxCR_EN);
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <main+0x274>)
 8000cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <main+0x274>)
 8000cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
  while(hadc3.DMA_Handle->Instance->CR & DMA_SxCR_EN);
 8000cc0:	bf00      	nop
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <main+0x274>)
 8000cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f7      	bne.n	8000cc2 <main+0x1ea>

  DMA2->LIFCR = 0x0F7D0F7D;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <main+0x278>)
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <main+0x27c>)
 8000cd6:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0x0F7D0F7D;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <main+0x278>)
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <main+0x27c>)
 8000cdc:	60da      	str	r2, [r3, #12]

  hadc3.DMA_Handle->Instance->CR &= ~(DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE);
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <main+0x274>)
 8000ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <main+0x274>)
 8000ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 021e 	bic.w	r2, r2, #30
 8000cf0:	601a      	str	r2, [r3, #0]
  hadc3.DMA_Handle->Instance->CR |= (DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_DBM);
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <main+0x274>)
 8000cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6819      	ldr	r1, [r3, #0]
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <main+0x274>)
 8000cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <main+0x280>)
 8000d02:	430b      	orrs	r3, r1
 8000d04:	6013      	str	r3, [r2, #0]
  hadc3.DMA_Handle->Instance->M0AR = (uint32_t)(&(au16Val1[2u][0u]));
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <main+0x274>)
 8000d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <main+0x294>)
 8000d0e:	60da      	str	r2, [r3, #12]
  hadc3.DMA_Handle->Instance->M1AR = (uint32_t)(&(au16Val2[2u][0u]));
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <main+0x274>)
 8000d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <main+0x298>)
 8000d18:	611a      	str	r2, [r3, #16]
  hadc3.DMA_Handle->Instance->NDTR = BUF_LEN;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <main+0x274>)
 8000d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2204      	movs	r2, #4
 8000d22:	605a      	str	r2, [r3, #4]
  hadc3.DMA_Handle->Instance->PAR = (uint32_t)(&hadc3.Instance->DR);
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <main+0x274>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <main+0x274>)
 8000d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	609a      	str	r2, [r3, #8]

  hadc3.DMA_Handle->Instance->CR |= (DMA_SxCR_EN);
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <main+0x274>)
 8000d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <main+0x274>)
 8000d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d40:	e018      	b.n	8000d74 <main+0x29c>
 8000d42:	bf00      	nop
 8000d44:	200000d0 	.word	0x200000d0
 8000d48:	20000028 	.word	0x20000028
 8000d4c:	20000118 	.word	0x20000118
 8000d50:	40026400 	.word	0x40026400
 8000d54:	0f7d0f7d 	.word	0x0f7d0f7d
 8000d58:	00040006 	.word	0x00040006
 8000d5c:	20000238 	.word	0x20000238
 8000d60:	20000220 	.word	0x20000220
 8000d64:	20000240 	.word	0x20000240
 8000d68:	20000228 	.word	0x20000228
 8000d6c:	20000248 	.word	0x20000248
 8000d70:	20000230 	.word	0x20000230
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  htim6.Instance->DIER |= TIM_DIER_UIE;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <main+0x2e8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <main+0x2e8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0201 	orr.w	r2, r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  htim6.Instance->PSC = 10000u-1u;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <main+0x2e8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
  htim6.Instance->ARR = (uint32_t)(1u * sTimerClocks.u32APB1TimerClock / (htim6.Instance->PSC + 1u) - 1u);
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <main+0x2e8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9e:	3301      	adds	r3, #1
 8000da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <main+0x2e8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3a01      	subs	r2, #1
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  htim6.Instance->CR1 |= TIM_CR1_CEN;
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <main+0x2e8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <main+0x2e8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 0201 	orr.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <main+0x2e4>
 8000dbe:	bf00      	nop
 8000dc0:	20000250 	.word	0x20000250

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	; 0x50
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2234      	movs	r2, #52	; 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 f988 	bl	80030e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <SystemClock_Config+0xd4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a2a      	ldr	r2, [pc, #168]	; (8000e98 <SystemClock_Config+0xd4>)
 8000dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <SystemClock_Config+0xd4>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <SystemClock_Config+0xd8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <SystemClock_Config+0xd8>)
 8000e06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <SystemClock_Config+0xd8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2310      	movs	r3, #16
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e24:	2302      	movs	r3, #2
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e30:	23d8      	movs	r3, #216	; 0xd8
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fb29 	bl	800249c <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e50:	f000 f930 	bl	80010b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e54:	f001 fad2 	bl	80023fc <HAL_PWREx_EnableOverDrive>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e5e:	f000 f929 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e78:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	2107      	movs	r1, #7
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fdb9 	bl	80029f8 <HAL_RCC_ClockConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e8c:	f000 f912 	bl	80010b4 <Error_Handler>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3750      	adds	r7, #80	; 0x50
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <vCalcTimerClocks>:

/* USER CODE BEGIN 4 */
void vCalcTimerClocks(psTimerClocks_t const psTimerClocks)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    uint32_t u32AHBPrescaler = 0u;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
    uint32_t u32APB1Prescaler = 0u;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
    uint32_t u32APB2Prescaler = 0u;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]

    switch(RCC->CFGR & RCC_CFGR_HPRE)
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <vCalcTimerClocks+0x20c>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ebc:	2bf0      	cmp	r3, #240	; 0xf0
 8000ebe:	d029      	beq.n	8000f14 <vCalcTimerClocks+0x74>
 8000ec0:	2bf0      	cmp	r3, #240	; 0xf0
 8000ec2:	d82b      	bhi.n	8000f1c <vCalcTimerClocks+0x7c>
 8000ec4:	2be0      	cmp	r3, #224	; 0xe0
 8000ec6:	d021      	beq.n	8000f0c <vCalcTimerClocks+0x6c>
 8000ec8:	2be0      	cmp	r3, #224	; 0xe0
 8000eca:	d827      	bhi.n	8000f1c <vCalcTimerClocks+0x7c>
 8000ecc:	2bd0      	cmp	r3, #208	; 0xd0
 8000ece:	d01a      	beq.n	8000f06 <vCalcTimerClocks+0x66>
 8000ed0:	2bd0      	cmp	r3, #208	; 0xd0
 8000ed2:	d823      	bhi.n	8000f1c <vCalcTimerClocks+0x7c>
 8000ed4:	2bc0      	cmp	r3, #192	; 0xc0
 8000ed6:	d013      	beq.n	8000f00 <vCalcTimerClocks+0x60>
 8000ed8:	2bc0      	cmp	r3, #192	; 0xc0
 8000eda:	d81f      	bhi.n	8000f1c <vCalcTimerClocks+0x7c>
 8000edc:	2bb0      	cmp	r3, #176	; 0xb0
 8000ede:	d00c      	beq.n	8000efa <vCalcTimerClocks+0x5a>
 8000ee0:	2bb0      	cmp	r3, #176	; 0xb0
 8000ee2:	d81b      	bhi.n	8000f1c <vCalcTimerClocks+0x7c>
 8000ee4:	2b80      	cmp	r3, #128	; 0x80
 8000ee6:	d002      	beq.n	8000eee <vCalcTimerClocks+0x4e>
 8000ee8:	2b90      	cmp	r3, #144	; 0x90
 8000eea:	d003      	beq.n	8000ef4 <vCalcTimerClocks+0x54>
 8000eec:	e016      	b.n	8000f1c <vCalcTimerClocks+0x7c>
    {
      case RCC_CFGR_HPRE_DIV2: u32AHBPrescaler = 2u; break;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e016      	b.n	8000f22 <vCalcTimerClocks+0x82>
      case RCC_CFGR_HPRE_DIV4: u32AHBPrescaler = 4u; break;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e013      	b.n	8000f22 <vCalcTimerClocks+0x82>
      case RCC_CFGR_HPRE_DIV16: u32AHBPrescaler = 16u; break;
 8000efa:	2310      	movs	r3, #16
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e010      	b.n	8000f22 <vCalcTimerClocks+0x82>
      case RCC_CFGR_HPRE_DIV64: u32AHBPrescaler = 64u; break;
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e00d      	b.n	8000f22 <vCalcTimerClocks+0x82>
      case RCC_CFGR_HPRE_DIV128: u32AHBPrescaler = 128u; break;
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e00a      	b.n	8000f22 <vCalcTimerClocks+0x82>
      case RCC_CFGR_HPRE_DIV256: u32AHBPrescaler = 256u; break;
 8000f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e006      	b.n	8000f22 <vCalcTimerClocks+0x82>
      case RCC_CFGR_HPRE_DIV512: u32AHBPrescaler = 512u; break;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e002      	b.n	8000f22 <vCalcTimerClocks+0x82>
      default: u32AHBPrescaler = 1u; break;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	bf00      	nop
    }

    switch(RCC->CFGR & RCC_CFGR_PPRE1)
 8000f22:	4b62      	ldr	r3, [pc, #392]	; (80010ac <vCalcTimerClocks+0x20c>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f2a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8000f2e:	d018      	beq.n	8000f62 <vCalcTimerClocks+0xc2>
 8000f30:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8000f34:	d818      	bhi.n	8000f68 <vCalcTimerClocks+0xc8>
 8000f36:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000f3a:	d00f      	beq.n	8000f5c <vCalcTimerClocks+0xbc>
 8000f3c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000f40:	d812      	bhi.n	8000f68 <vCalcTimerClocks+0xc8>
 8000f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f46:	d003      	beq.n	8000f50 <vCalcTimerClocks+0xb0>
 8000f48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000f4c:	d003      	beq.n	8000f56 <vCalcTimerClocks+0xb6>
 8000f4e:	e00b      	b.n	8000f68 <vCalcTimerClocks+0xc8>
    {
      case RCC_CFGR_PPRE1_DIV2: u32APB1Prescaler = 2u; break;
 8000f50:	2302      	movs	r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	e00b      	b.n	8000f6e <vCalcTimerClocks+0xce>
      case RCC_CFGR_PPRE1_DIV4: u32APB1Prescaler = 4u; break;
 8000f56:	2304      	movs	r3, #4
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	e008      	b.n	8000f6e <vCalcTimerClocks+0xce>
      case RCC_CFGR_PPRE1_DIV8: u32APB1Prescaler = 8u; break;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	e005      	b.n	8000f6e <vCalcTimerClocks+0xce>
      case RCC_CFGR_PPRE1_DIV16: u32APB1Prescaler = 16u; break;
 8000f62:	2310      	movs	r3, #16
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	e002      	b.n	8000f6e <vCalcTimerClocks+0xce>
      default: u32APB1Prescaler = 1u; break;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	bf00      	nop
    }

    switch(RCC->CFGR & RCC_CFGR_PPRE1)
 8000f6e:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <vCalcTimerClocks+0x20c>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f76:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000f7a:	d018      	beq.n	8000fae <vCalcTimerClocks+0x10e>
 8000f7c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000f80:	d818      	bhi.n	8000fb4 <vCalcTimerClocks+0x114>
 8000f82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000f86:	d00f      	beq.n	8000fa8 <vCalcTimerClocks+0x108>
 8000f88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000f8c:	d812      	bhi.n	8000fb4 <vCalcTimerClocks+0x114>
 8000f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f92:	d003      	beq.n	8000f9c <vCalcTimerClocks+0xfc>
 8000f94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000f98:	d003      	beq.n	8000fa2 <vCalcTimerClocks+0x102>
 8000f9a:	e00b      	b.n	8000fb4 <vCalcTimerClocks+0x114>
    {
      case RCC_CFGR_PPRE2_DIV2: u32APB2Prescaler = 2u; break;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e00b      	b.n	8000fba <vCalcTimerClocks+0x11a>
      case RCC_CFGR_PPRE2_DIV4: u32APB2Prescaler = 4u; break;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e008      	b.n	8000fba <vCalcTimerClocks+0x11a>
      case RCC_CFGR_PPRE2_DIV8: u32APB2Prescaler = 8u; break;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e005      	b.n	8000fba <vCalcTimerClocks+0x11a>
      case RCC_CFGR_PPRE2_DIV16: u32APB2Prescaler = 16u; break;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e002      	b.n	8000fba <vCalcTimerClocks+0x11a>
      default: u32APB2Prescaler = 1u; break;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	bf00      	nop
    }

    if (RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE)
 8000fba:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <vCalcTimerClocks+0x20c>)
 8000fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d038      	beq.n	800103a <vCalcTimerClocks+0x19a>
    {
      if ((u32APB1Prescaler == 1u) || (u32APB1Prescaler == 2u) || (u32APB1Prescaler == 4u))
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <vCalcTimerClocks+0x13a>
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d002      	beq.n	8000fda <vCalcTimerClocks+0x13a>
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d107      	bne.n	8000fea <vCalcTimerClocks+0x14a>
      {
	psTimerClocks->u32APB1TimerClock = SystemCoreClock / u32AHBPrescaler;
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <vCalcTimerClocks+0x210>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e00a      	b.n	8001000 <vCalcTimerClocks+0x160>
      }
      else
      {
	psTimerClocks->u32APB1TimerClock = SystemCoreClock * 4u / u32AHBPrescaler / u32APB1Prescaler;
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <vCalcTimerClocks+0x210>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	009a      	lsls	r2, r3, #2
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	601a      	str	r2, [r3, #0]
      }

      if ((u32APB2Prescaler == 1u) || (u32APB2Prescaler == 2u) || (u32APB2Prescaler == 4u))
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <vCalcTimerClocks+0x172>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d002      	beq.n	8001012 <vCalcTimerClocks+0x172>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b04      	cmp	r3, #4
 8001010:	d107      	bne.n	8001022 <vCalcTimerClocks+0x182>
      {
	psTimerClocks->u32APB2TimerClock = SystemCoreClock / u32AHBPrescaler;
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <vCalcTimerClocks+0x210>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fbb2 f2f3 	udiv	r2, r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	605a      	str	r2, [r3, #4]
      else
      {
	psTimerClocks->u32APB2TimerClock = SystemCoreClock * 2u / u32AHBPrescaler / u32APB2Prescaler;
      }
    }
}
 8001020:	e03d      	b.n	800109e <vCalcTimerClocks+0x1fe>
	psTimerClocks->u32APB2TimerClock = SystemCoreClock * 4u / u32AHBPrescaler / u32APB2Prescaler;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <vCalcTimerClocks+0x210>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	009a      	lsls	r2, r3, #2
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fbb2 f2f3 	udiv	r2, r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	fbb2 f2f3 	udiv	r2, r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	605a      	str	r2, [r3, #4]
}
 8001038:	e031      	b.n	800109e <vCalcTimerClocks+0x1fe>
      if (u32APB1Prescaler == 1u)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10a      	bne.n	8001056 <vCalcTimerClocks+0x1b6>
	psTimerClocks->u32APB1TimerClock = SystemCoreClock / u32AHBPrescaler / u32APB1Prescaler;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <vCalcTimerClocks+0x210>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fbb2 f2f3 	udiv	r2, r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e00a      	b.n	800106c <vCalcTimerClocks+0x1cc>
	psTimerClocks->u32APB1TimerClock = SystemCoreClock * 2u / u32AHBPrescaler / u32APB1Prescaler;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <vCalcTimerClocks+0x210>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	005a      	lsls	r2, r3, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	fbb2 f2f3 	udiv	r2, r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	601a      	str	r2, [r3, #0]
      if (u32APB2Prescaler == 1u)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d10a      	bne.n	8001088 <vCalcTimerClocks+0x1e8>
	psTimerClocks->u32APB2TimerClock = SystemCoreClock / u32AHBPrescaler / u32APB2Prescaler;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <vCalcTimerClocks+0x210>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fbb2 f2f3 	udiv	r2, r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	605a      	str	r2, [r3, #4]
}
 8001086:	e00a      	b.n	800109e <vCalcTimerClocks+0x1fe>
	psTimerClocks->u32APB2TimerClock = SystemCoreClock * 2u / u32AHBPrescaler / u32APB2Prescaler;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <vCalcTimerClocks+0x210>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	005a      	lsls	r2, r3, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fbb2 f2f3 	udiv	r2, r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	fbb2 f2f3 	udiv	r2, r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	605a      	str	r2, [r3, #4]
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	20000000 	.word	0x20000000

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  GPIOB->BSRR = GPIO_PIN_14;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <Error_Handler+0x14>)
 80010be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c2:	619a      	str	r2, [r3, #24]
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x10>
 80010c6:	bf00      	nop
 80010c8:	40020400 	.word	0x40020400

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_MspInit+0x44>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_MspInit+0x44>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_MspInit+0x44>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_MspInit+0x44>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_MspInit+0x44>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x44>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  Error_Handler();
 800111e:	f7ff ffc9 	bl	80010b4 <Error_Handler>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <HardFault_Handler+0x8>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <MemManage_Handler+0x4>

0800112a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <UsageFault_Handler+0x4>

08001136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f000 fa1a 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  if (hadc1.Instance->SR & ADC_SR_EOC)
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <ADC_IRQHandler+0x68>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <ADC_IRQHandler+0x22>
  {
    hadc1.Instance->SR &= ~(ADC_SR_EOC);
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <ADC_IRQHandler+0x68>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <ADC_IRQHandler+0x68>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0202 	bic.w	r2, r2, #2
 800118c:	601a      	str	r2, [r3, #0]
  }

  if (hadc2.Instance->SR & ADC_SR_EOC)
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <ADC_IRQHandler+0x6c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <ADC_IRQHandler+0x40>
  {
    hadc2.Instance->SR &= ~(ADC_SR_EOC);
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <ADC_IRQHandler+0x6c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <ADC_IRQHandler+0x6c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0202 	bic.w	r2, r2, #2
 80011aa:	601a      	str	r2, [r3, #0]
  }

  if (hadc3.Instance->SR & ADC_SR_EOC)
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <ADC_IRQHandler+0x70>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d007      	beq.n	80011ca <ADC_IRQHandler+0x5e>
  {
    hadc3.Instance->SR &= ~(ADC_SR_EOC);
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <ADC_IRQHandler+0x70>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <ADC_IRQHandler+0x70>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0202 	bic.w	r2, r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
  HAL_ADC_IRQHandler(&hadc2);
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC_IRQn 1 */
#endif
  /* USER CODE END ADC_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	200000d0 	.word	0x200000d0
 80011d8:	20000028 	.word	0x20000028
 80011dc:	20000118 	.word	0x20000118

080011e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  if (htim6.Instance->SR & TIM_SR_UIF)
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <TIM6_DAC_IRQHandler+0x58>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d01d      	beq.n	800122e <TIM6_DAC_IRQHandler+0x4e>
  {
    htim6.Instance->SR &= ~(TIM_SR_UIF);
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <TIM6_DAC_IRQHandler+0x58>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <TIM6_DAC_IRQHandler+0x58>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	611a      	str	r2, [r3, #16]
    hadc1.Instance->CR2 |= ADC_CR2_SWSTART;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <TIM6_DAC_IRQHandler+0x5c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <TIM6_DAC_IRQHandler+0x5c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001210:	609a      	str	r2, [r3, #8]

    (GPIOB->ODR & GPIO_PIN_7) ? (GPIOB->BSRR = GPIO_PIN_7 << 16u) : (GPIOB->BSRR = GPIO_PIN_7);
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <TIM6_DAC_IRQHandler+0x60>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <TIM6_DAC_IRQHandler+0x48>
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <TIM6_DAC_IRQHandler+0x60>)
 8001220:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001224:	619a      	str	r2, [r3, #24]
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
#endif

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001226:	e002      	b.n	800122e <TIM6_DAC_IRQHandler+0x4e>
    (GPIOB->ODR & GPIO_PIN_7) ? (GPIOB->BSRR = GPIO_PIN_7 << 16u) : (GPIOB->BSRR = GPIO_PIN_7);
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <TIM6_DAC_IRQHandler+0x60>)
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000250 	.word	0x20000250
 800123c:	200000d0 	.word	0x200000d0
 8001240:	40020400 	.word	0x40020400

08001244 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  if (DMA2->LISR & DMA_LISR_TCIF0)
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <DMA2_Stream0_IRQHandler+0x1c>
  {
    DMA2->LIFCR |= DMA_LIFCR_CTCIF0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	6093      	str	r3, [r2, #8]
  }

  if (DMA2->LISR & DMA_LISR_HTIF0)
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <DMA2_Stream0_IRQHandler+0x34>
  {
    DMA2->LIFCR |= DMA_LIFCR_CHTIF0;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6093      	str	r3, [r2, #8]
  }

  if (DMA2->LISR & DMA_LISR_TEIF0)
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <DMA2_Stream0_IRQHandler+0x50>
  {
    DMA2->LIFCR |= DMA_LIFCR_CTEIF0;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6093      	str	r3, [r2, #8]
    Error_Handler();
 8001290:	f7ff ff10 	bl	80010b4 <Error_Handler>
  }

  if (DMA2->LISR & DMA_LISR_DMEIF0)
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <DMA2_Stream0_IRQHandler+0x6c>
  {
    DMA2->LIFCR |= DMA_LIFCR_CDMEIF0;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6093      	str	r3, [r2, #8]
    Error_Handler();
 80012ac:	f7ff ff02 	bl	80010b4 <Error_Handler>
  }

  if (DMA2->LISR & DMA_LISR_FEIF0)
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d007      	beq.n	80012cc <DMA2_Stream0_IRQHandler+0x88>
  {
    DMA2->LIFCR |= DMA_LIFCR_CFEIF0;
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <DMA2_Stream0_IRQHandler+0x8c>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6093      	str	r3, [r2, #8]
    Error_Handler();
 80012c8:	f7ff fef4 	bl	80010b4 <Error_Handler>
  HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
#endif

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40026400 	.word	0x40026400

080012d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
  if (DMA2->LISR & DMA_LISR_TCIF1)
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <DMA2_Stream1_IRQHandler+0x1c>
  {
    DMA2->LIFCR |= DMA_LIFCR_CTCIF1;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 80012ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ee:	6093      	str	r3, [r2, #8]
  }

  if (DMA2->LISR & DMA_LISR_HTIF1)
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <DMA2_Stream1_IRQHandler+0x34>
  {
    DMA2->LIFCR |= DMA_LIFCR_CHTIF1;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	6093      	str	r3, [r2, #8]
  }

  if (DMA2->LISR & DMA_LISR_TEIF1)
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <DMA2_Stream1_IRQHandler+0x50>
  {
    DMA2->LIFCR |= DMA_LIFCR_CTEIF1;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131e:	6093      	str	r3, [r2, #8]
    Error_Handler();
 8001320:	f7ff fec8 	bl	80010b4 <Error_Handler>
  }

  if (DMA2->LISR & DMA_LISR_DMEIF1)
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d007      	beq.n	8001340 <DMA2_Stream1_IRQHandler+0x6c>
  {
    DMA2->LIFCR |= DMA_LIFCR_CDMEIF1;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	6093      	str	r3, [r2, #8]
    Error_Handler();
 800133c:	f7ff feba 	bl	80010b4 <Error_Handler>
  }

  if (DMA2->LISR & DMA_LISR_FEIF1)
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <DMA2_Stream1_IRQHandler+0x88>
  {
    DMA2->LIFCR |= DMA_LIFCR_CFEIF1;
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <DMA2_Stream1_IRQHandler+0x8c>)
 8001352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001356:	6093      	str	r3, [r2, #8]
    Error_Handler();
 8001358:	f7ff feac 	bl	80010b4 <Error_Handler>
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
#endif

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40026400 	.word	0x40026400

08001364 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
  if (DMA2->LISR & DMA_LISR_TCIF2)
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <DMA2_Stream2_IRQHandler+0x1c>
  {
    DMA2->LIFCR |= DMA_LIFCR_CTCIF2;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 800137a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137e:	6093      	str	r3, [r2, #8]
  }

  if (DMA2->LISR & DMA_LISR_HTIF2)
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <DMA2_Stream2_IRQHandler+0x34>
  {
    DMA2->LIFCR |= DMA_LIFCR_CHTIF2;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 8001392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001396:	6093      	str	r3, [r2, #8]
  }

  if (DMA2->LISR & DMA_LISR_TEIF2)
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <DMA2_Stream2_IRQHandler+0x50>
  {
    DMA2->LIFCR |= DMA_LIFCR_CTEIF2;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 80013aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013ae:	6093      	str	r3, [r2, #8]
    Error_Handler();
 80013b0:	f7ff fe80 	bl	80010b4 <Error_Handler>
  }

  if (DMA2->LISR & DMA_LISR_DMEIF2)
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <DMA2_Stream2_IRQHandler+0x6c>
  {
    DMA2->LIFCR |= DMA_LIFCR_CDMEIF2;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 80013c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ca:	6093      	str	r3, [r2, #8]
    Error_Handler();
 80013cc:	f7ff fe72 	bl	80010b4 <Error_Handler>
  }

  if (DMA2->LISR & DMA_LISR_FEIF2)
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <DMA2_Stream2_IRQHandler+0x88>
  {
    DMA2->LIFCR |= DMA_LIFCR_CFEIF2;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <DMA2_Stream2_IRQHandler+0x8c>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e6:	6093      	str	r3, [r2, #8]
    Error_Handler();
 80013e8:	f7ff fe64 	bl	80010b4 <Error_Handler>
  HAL_DMA_IRQHandler(&hdma_adc2);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
#endif

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40026400 	.word	0x40026400

080013f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_TIM6_Init+0x64>)
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <MX_TIM6_Init+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_TIM6_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_TIM6_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_TIM6_Init+0x64>)
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_TIM6_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_TIM6_Init+0x64>)
 800144a:	f001 fca3 	bl	8002d94 <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001454:	f7ff fe2e 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_TIM6_Init+0x64>)
 8001466:	f001 fd8d 	bl	8002f84 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001470:	f7ff fe20 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000250 	.word	0x20000250
 8001480:	40001000 	.word	0x40001000

08001484 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_TIM_Base_MspInit+0x44>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d113      	bne.n	80014be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_TIM_Base_MspInit+0x48>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <HAL_TIM_Base_MspInit+0x48>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_TIM_Base_MspInit+0x48>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2036      	movs	r0, #54	; 0x36
 80014b4:	f000 fc45 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014b8:	2036      	movs	r0, #54	; 0x36
 80014ba:	f000 fc5e 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40001000 	.word	0x40001000
 80014cc:	40023800 	.word	0x40023800

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d6:	490e      	ldr	r1, [pc, #56]	; (8001510 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ec:	4c0b      	ldr	r4, [pc, #44]	; (800151c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fa:	f7ff ff7b 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f001 fdcf 	bl	80030a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff fae9 	bl	8000ad8 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001514:	08003138 	.word	0x08003138
  ldr r2, =_sbss
 8001518:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800151c:	200002a0 	.word	0x200002a0

08001520 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <CAN1_RX0_IRQHandler>

08001522 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 fc00 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152c:	2000      	movs	r0, #0
 800152e:	f000 f805 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001532:	f7ff fdcb 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x54>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fc1b 	bl	8001d96 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e00e      	b.n	8001588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d80a      	bhi.n	8001586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 fbe3 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800157c:	4a06      	ldr	r2, [pc, #24]	; (8001598 <HAL_InitTick+0x5c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000000 	.word	0x20000000
 8001594:	20000008 	.word	0x20000008
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	2000029c 	.word	0x2000029c

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	2000029c 	.word	0x2000029c

080015dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e031      	b.n	8001656 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff f896 	bl	800072c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d116      	bne.n	8001648 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_ADC_Init+0x84>)
 8001620:	4013      	ands	r3, r2
 8001622:	f043 0202 	orr.w	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f970 	bl	8001910 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
 8001646:	e001      	b.n	800164c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	ffffeefd 	.word	0xffffeefd

08001664 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1c>
 800167c:	2302      	movs	r3, #2
 800167e:	e136      	b.n	80018ee <HAL_ADC_ConfigChannel+0x28a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b09      	cmp	r3, #9
 800168e:	d93a      	bls.n	8001706 <HAL_ADC_ConfigChannel+0xa2>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001698:	d035      	beq.n	8001706 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68d9      	ldr	r1, [r3, #12]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	3b1e      	subs	r3, #30
 80016b0:	2207      	movs	r2, #7
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	400a      	ands	r2, r1
 80016be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a8d      	ldr	r2, [pc, #564]	; (80018fc <HAL_ADC_ConfigChannel+0x298>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10a      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68d9      	ldr	r1, [r3, #12]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	061a      	lsls	r2, r3, #24
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016de:	e035      	b.n	800174c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68d9      	ldr	r1, [r3, #12]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	4603      	mov	r3, r0
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4403      	add	r3, r0
 80016f8:	3b1e      	subs	r3, #30
 80016fa:	409a      	lsls	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001704:	e022      	b.n	800174c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6919      	ldr	r1, [r3, #16]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	2207      	movs	r2, #7
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43da      	mvns	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	400a      	ands	r2, r1
 8001728:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6919      	ldr	r1, [r3, #16]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	4618      	mov	r0, r3
 800173c:	4603      	mov	r3, r0
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4403      	add	r3, r0
 8001742:	409a      	lsls	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d824      	bhi.n	800179e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b05      	subs	r3, #5
 8001766:	221f      	movs	r2, #31
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43da      	mvns	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	400a      	ands	r2, r1
 8001774:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	3b05      	subs	r3, #5
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
 800179c:	e04c      	b.n	8001838 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d824      	bhi.n	80017f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	3b23      	subs	r3, #35	; 0x23
 80017b8:	221f      	movs	r2, #31
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	400a      	ands	r2, r1
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	3b23      	subs	r3, #35	; 0x23
 80017e2:	fa00 f203 	lsl.w	r2, r0, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
 80017ee:	e023      	b.n	8001838 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	3b41      	subs	r3, #65	; 0x41
 8001802:	221f      	movs	r2, #31
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43da      	mvns	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	400a      	ands	r2, r1
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	3b41      	subs	r3, #65	; 0x41
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a30      	ldr	r2, [pc, #192]	; (8001900 <HAL_ADC_ConfigChannel+0x29c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10a      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1f4>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800184a:	d105      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a2c      	ldr	r2, [pc, #176]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 8001852:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001856:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <HAL_ADC_ConfigChannel+0x29c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10f      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x21e>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b12      	cmp	r3, #18
 8001868:	d10b      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a25      	ldr	r2, [pc, #148]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 8001870:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001874:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001876:	4b23      	ldr	r3, [pc, #140]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a22      	ldr	r2, [pc, #136]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 800187c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001880:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <HAL_ADC_ConfigChannel+0x29c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d12b      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x280>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <HAL_ADC_ConfigChannel+0x298>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d003      	beq.n	800189e <HAL_ADC_ConfigChannel+0x23a>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b11      	cmp	r3, #17
 800189c:	d122      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 80018a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018a8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <HAL_ADC_ConfigChannel+0x2a0>)
 80018b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018b4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_ADC_ConfigChannel+0x298>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d111      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_ADC_ConfigChannel+0x2a4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_ADC_ConfigChannel+0x2a8>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9a      	lsrs	r2, r3, #18
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018d6:	e002      	b.n	80018de <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3b01      	subs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f9      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	10000012 	.word	0x10000012
 8001900:	40012000 	.word	0x40012000
 8001904:	40012300 	.word	0x40012300
 8001908:	20000000 	.word	0x20000000
 800190c:	431bde83 	.word	0x431bde83

08001910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <ADC_Init+0x1ec>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a77      	ldr	r2, [pc, #476]	; (8001afc <ADC_Init+0x1ec>)
 800191e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001922:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <ADC_Init+0x1ec>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4973      	ldr	r1, [pc, #460]	; (8001afc <ADC_Init+0x1ec>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	021a      	lsls	r2, r3, #8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <ADC_Init+0x1f0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d022      	beq.n	80019ea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	e00f      	b.n	8001a0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0202 	bic.w	r2, r2, #2
 8001a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	005a      	lsls	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	3b01      	subs	r3, #1
 8001a64:	035a      	lsls	r2, r3, #13
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	e007      	b.n	8001a80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	051a      	lsls	r2, r3, #20
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6899      	ldr	r1, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac2:	025a      	lsls	r2, r3, #9
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	029a      	lsls	r2, r3, #10
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40012300 	.word	0x40012300
 8001b00:	0f000001 	.word	0x0f000001

08001b04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e02f      	b.n	8001b7c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b2a:	f023 031f 	bic.w	r3, r3, #31
 8001b2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->Mode;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4913      	ldr	r1, [pc, #76]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b48:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	490d      	ldr	r1, [pc, #52]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
  
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b62:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4906      	ldr	r1, [pc, #24]	; (8001b88 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40012300 	.word	0x40012300

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <__NVIC_SetPriorityGrouping+0x40>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x40>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	05fa0000 	.word	0x05fa0000

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fc02 	bl	80015c4 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e099      	b.n	8001f00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dec:	e00f      	b.n	8001e0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dee:	f7ff fbe9 	bl	80015c4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d908      	bls.n	8001e0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2203      	movs	r2, #3
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e078      	b.n	8001f00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e8      	bne.n	8001dee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_DMA_Init+0x158>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d107      	bne.n	8001e78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4313      	orrs	r3, r2
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f023 0307 	bic.w	r3, r3, #7
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d117      	bne.n	8001ed2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f85f 	bl	8001f78 <DMA_CheckFifoParam>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e016      	b.n	8001f00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f816 	bl	8001f0c <DMA_CalcBaseAndBitshift>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	223f      	movs	r2, #63	; 0x3f
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	e010803f 	.word	0xe010803f

08001f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b10      	subs	r3, #16
 8001f1c:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <DMA_CalcBaseAndBitshift+0x60>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <DMA_CalcBaseAndBitshift+0x64>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d908      	bls.n	8001f4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <DMA_CalcBaseAndBitshift+0x68>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	1d1a      	adds	r2, r3, #4
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4a:	e006      	b.n	8001f5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <DMA_CalcBaseAndBitshift+0x68>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	aaaaaaab 	.word	0xaaaaaaab
 8001f70:	08003120 	.word	0x08003120
 8001f74:	fffffc00 	.word	0xfffffc00

08001f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11f      	bne.n	8001fd2 <DMA_CheckFifoParam+0x5a>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d856      	bhi.n	8002046 <DMA_CheckFifoParam+0xce>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <DMA_CheckFifoParam+0x28>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fc3 	.word	0x08001fc3
 8001fa8:	08001fb1 	.word	0x08001fb1
 8001fac:	08002047 	.word	0x08002047
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d046      	beq.n	800204a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc0:	e043      	b.n	800204a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fca:	d140      	bne.n	800204e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd0:	e03d      	b.n	800204e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fda:	d121      	bne.n	8002020 <DMA_CheckFifoParam+0xa8>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d837      	bhi.n	8002052 <DMA_CheckFifoParam+0xda>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x70>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08001fff 	.word	0x08001fff
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	08002011 	.word	0x08002011
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffc:	e030      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d025      	beq.n	8002056 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200e:	e022      	b.n	8002056 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002018:	d11f      	bne.n	800205a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800201e:	e01c      	b.n	800205a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d903      	bls.n	800202e <DMA_CheckFifoParam+0xb6>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d003      	beq.n	8002034 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800202c:	e018      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
      break;
 8002032:	e015      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e00b      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002046:	bf00      	nop
 8002048:	e00a      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e008      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800204e:	bf00      	nop
 8002050:	e006      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
 8002054:	e004      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
 8002058:	e002      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;   
 800205a:	bf00      	nop
 800205c:	e000      	b.n	8002060 <DMA_CheckFifoParam+0xe8>
      break;
 800205e:	bf00      	nop
    }
  } 
  
  return status; 
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e175      	b.n	800237c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 8164 	bne.w	8002376 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x56>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80be 	beq.w	8002376 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_GPIO_Init+0x324>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a65      	ldr	r2, [pc, #404]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_GPIO_Init+0x324>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002212:	4a61      	ldr	r2, [pc, #388]	; (8002398 <HAL_GPIO_Init+0x328>)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <HAL_GPIO_Init+0x32c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d037      	beq.n	80022ae <HAL_GPIO_Init+0x23e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a57      	ldr	r2, [pc, #348]	; (80023a0 <HAL_GPIO_Init+0x330>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d031      	beq.n	80022aa <HAL_GPIO_Init+0x23a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <HAL_GPIO_Init+0x334>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02b      	beq.n	80022a6 <HAL_GPIO_Init+0x236>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a55      	ldr	r2, [pc, #340]	; (80023a8 <HAL_GPIO_Init+0x338>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d025      	beq.n	80022a2 <HAL_GPIO_Init+0x232>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a54      	ldr	r2, [pc, #336]	; (80023ac <HAL_GPIO_Init+0x33c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01f      	beq.n	800229e <HAL_GPIO_Init+0x22e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a53      	ldr	r2, [pc, #332]	; (80023b0 <HAL_GPIO_Init+0x340>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x22a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_GPIO_Init+0x344>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x226>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_GPIO_Init+0x348>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x222>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a50      	ldr	r2, [pc, #320]	; (80023bc <HAL_GPIO_Init+0x34c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x21e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x350>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x21a>
 8002286:	2309      	movs	r3, #9
 8002288:	e012      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 800228a:	230a      	movs	r3, #10
 800228c:	e010      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 800228e:	2308      	movs	r3, #8
 8002290:	e00e      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 8002292:	2307      	movs	r3, #7
 8002294:	e00c      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 8002296:	2306      	movs	r3, #6
 8002298:	e00a      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 800229a:	2305      	movs	r3, #5
 800229c:	e008      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 800229e:	2304      	movs	r3, #4
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 80022a2:	2303      	movs	r3, #3
 80022a4:	e004      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x240>
 80022ae:	2300      	movs	r3, #0
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f002 0203 	and.w	r2, r2, #3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4093      	lsls	r3, r2
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022c0:	4935      	ldr	r1, [pc, #212]	; (8002398 <HAL_GPIO_Init+0x328>)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ce:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <HAL_GPIO_Init+0x354>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f2:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <HAL_GPIO_Init+0x354>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f8:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <HAL_GPIO_Init+0x354>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800231c:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <HAL_GPIO_Init+0x354>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_GPIO_Init+0x354>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002346:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_GPIO_Init+0x354>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_GPIO_Init+0x354>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <HAL_GPIO_Init+0x354>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3301      	adds	r3, #1
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	f67f ae86 	bls.w	8002090 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40013800 	.word	0x40013800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40021400 	.word	0x40021400
 80023b4:	40021800 	.word	0x40021800
 80023b8:	40021c00 	.word	0x40021c00
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40022400 	.word	0x40022400
 80023c4:	40013c00 	.word	0x40013c00

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <HAL_PWREx_EnableOverDrive+0x98>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a22      	ldr	r2, [pc, #136]	; (8002494 <HAL_PWREx_EnableOverDrive+0x98>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_PWREx_EnableOverDrive+0x98>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800242a:	f7ff f8cb 	bl	80015c4 <HAL_GetTick>
 800242e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002430:	e009      	b.n	8002446 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002432:	f7ff f8c7 	bl	80015c4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002440:	d901      	bls.n	8002446 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e022      	b.n	800248c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d1ee      	bne.n	8002432 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_PWREx_EnableOverDrive+0x9c>)
 800245a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002460:	f7ff f8b0 	bl	80015c4 <HAL_GetTick>
 8002464:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002466:	e009      	b.n	800247c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002468:	f7ff f8ac 	bl	80015c4 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002476:	d901      	bls.n	800247c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e007      	b.n	800248c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_PWREx_EnableOverDrive+0x9c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002488:	d1ee      	bne.n	8002468 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40023800 	.word	0x40023800
 8002498:	40007000 	.word	0x40007000

0800249c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e29b      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8087 	beq.w	80025ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c0:	4b96      	ldr	r3, [pc, #600]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d00c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024cc:	4b93      	ldr	r3, [pc, #588]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d112      	bne.n	80024fe <HAL_RCC_OscConfig+0x62>
 80024d8:	4b90      	ldr	r3, [pc, #576]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e4:	d10b      	bne.n	80024fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	4b8d      	ldr	r3, [pc, #564]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d06c      	beq.n	80025cc <HAL_RCC_OscConfig+0x130>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d168      	bne.n	80025cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e275      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x7a>
 8002508:	4b84      	ldr	r3, [pc, #528]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a83      	ldr	r2, [pc, #524]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e02e      	b.n	8002574 <HAL_RCC_OscConfig+0xd8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x9c>
 800251e:	4b7f      	ldr	r3, [pc, #508]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a7e      	ldr	r2, [pc, #504]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b7c      	ldr	r3, [pc, #496]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a7b      	ldr	r2, [pc, #492]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e01d      	b.n	8002574 <HAL_RCC_OscConfig+0xd8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0xc0>
 8002542:	4b76      	ldr	r3, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a75      	ldr	r2, [pc, #468]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b73      	ldr	r3, [pc, #460]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a72      	ldr	r2, [pc, #456]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0xd8>
 800255c:	4b6f      	ldr	r3, [pc, #444]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6e      	ldr	r2, [pc, #440]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b6c      	ldr	r3, [pc, #432]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6b      	ldr	r2, [pc, #428]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800256e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d013      	beq.n	80025a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7ff f822 	bl	80015c4 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002584:	f7ff f81e 	bl	80015c4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e229      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b61      	ldr	r3, [pc, #388]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0xe8>
 80025a2:	e014      	b.n	80025ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff f80e 	bl	80015c4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff f80a 	bl	80015c4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e215      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	4b57      	ldr	r3, [pc, #348]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x110>
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d069      	beq.n	80026ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025da:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e6:	4b4d      	ldr	r3, [pc, #308]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d11c      	bne.n	800262c <HAL_RCC_OscConfig+0x190>
 80025f2:	4b4a      	ldr	r3, [pc, #296]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x17a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e1e9      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	493d      	ldr	r1, [pc, #244]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262a:	e040      	b.n	80026ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d023      	beq.n	800267c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002634:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a38      	ldr	r2, [pc, #224]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe ffc0 	bl	80015c4 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002648:	f7fe ffbc 	bl	80015c4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1c7      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4929      	ldr	r1, [pc, #164]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
 800267a:	e018      	b.n	80026ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_OscConfig+0x280>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <HAL_RCC_OscConfig+0x280>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe ff9c 	bl	80015c4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe ff98 	bl	80015c4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1a3      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d038      	beq.n	800272c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d019      	beq.n	80026f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80026c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c6:	4a15      	ldr	r2, [pc, #84]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ce:	f7fe ff79 	bl	80015c4 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe ff75 	bl	80015c4 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e180      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x23a>
 80026f4:	e01a      	b.n	800272c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80026f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_RCC_OscConfig+0x280>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7fe ff5f 	bl	80015c4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe ff5b 	bl	80015c4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d903      	bls.n	8002720 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e166      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
 800271c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b92      	ldr	r3, [pc, #584]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a4 	beq.w	8002882 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b8c      	ldr	r3, [pc, #560]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	4b89      	ldr	r3, [pc, #548]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a88      	ldr	r2, [pc, #544]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b86      	ldr	r3, [pc, #536]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002762:	4b83      	ldr	r3, [pc, #524]	; (8002970 <HAL_RCC_OscConfig+0x4d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d118      	bne.n	80027a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800276e:	4b80      	ldr	r3, [pc, #512]	; (8002970 <HAL_RCC_OscConfig+0x4d4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7f      	ldr	r2, [pc, #508]	; (8002970 <HAL_RCC_OscConfig+0x4d4>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277a:	f7fe ff23 	bl	80015c4 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002782:	f7fe ff1f 	bl	80015c4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	; 0x64
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e12a      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002794:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_OscConfig+0x4d4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x31a>
 80027a8:	4b70      	ldr	r3, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a6f      	ldr	r2, [pc, #444]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	e02d      	b.n	8002812 <HAL_RCC_OscConfig+0x376>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x33c>
 80027be:	4b6b      	ldr	r3, [pc, #428]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a6a      	ldr	r2, [pc, #424]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	4b68      	ldr	r3, [pc, #416]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a67      	ldr	r2, [pc, #412]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	e01c      	b.n	8002812 <HAL_RCC_OscConfig+0x376>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d10c      	bne.n	80027fa <HAL_RCC_OscConfig+0x35e>
 80027e0:	4b62      	ldr	r3, [pc, #392]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a61      	ldr	r2, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	4b5f      	ldr	r3, [pc, #380]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a5e      	ldr	r2, [pc, #376]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
 80027f8:	e00b      	b.n	8002812 <HAL_RCC_OscConfig+0x376>
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a5b      	ldr	r2, [pc, #364]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d015      	beq.n	8002846 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7fe fed3 	bl	80015c4 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fecf 	bl	80015c4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e0d8      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	4b4c      	ldr	r3, [pc, #304]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ee      	beq.n	8002822 <HAL_RCC_OscConfig+0x386>
 8002844:	e014      	b.n	8002870 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7fe febd 	bl	80015c4 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe feb9 	bl	80015c4 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0c2      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ee      	bne.n	800284e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002876:	4b3d      	ldr	r3, [pc, #244]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a3c      	ldr	r2, [pc, #240]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80ae 	beq.w	80029e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288c:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d06d      	beq.n	8002974 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d14b      	bne.n	8002938 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a31      	ldr	r2, [pc, #196]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80028a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fe8a 	bl	80015c4 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fe86 	bl	80015c4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e091      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	071b      	lsls	r3, r3, #28
 80028fe:	491b      	ldr	r1, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800290a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fe58 	bl	80015c4 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fe54 	bl	80015c4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e05f      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x47c>
 8002936:	e057      	b.n	80029e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 800293e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fe3e 	bl	80015c4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fe3a 	bl	80015c4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e045      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_OscConfig+0x4d0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x4b0>
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x54c>
 800296c:	40023800 	.word	0x40023800
 8002970:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <HAL_RCC_OscConfig+0x558>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d030      	beq.n	80029e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d129      	bne.n	80029e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d122      	bne.n	80029e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a4:	4013      	ands	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d119      	bne.n	80029e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	3b01      	subs	r3, #1
 80029be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d10f      	bne.n	80029e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0d0      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d910      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b67      	ldr	r3, [pc, #412]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 020f 	bic.w	r2, r3, #15
 8002a26:	4965      	ldr	r1, [pc, #404]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b8      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	494d      	ldr	r1, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d040      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d115      	bne.n	8002ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e073      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06b      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4936      	ldr	r1, [pc, #216]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aec:	f7fe fd6a 	bl	80015c4 <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fd66 	bl	80015c4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e053      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d210      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 020f 	bic.w	r2, r3, #15
 8002b32:	4922      	ldr	r1, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b8a:	f000 f821 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	490a      	ldr	r1, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1d4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fcc6 	bl	800153c <HAL_InitTick>

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08003110 	.word	0x08003110
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000004 	.word	0x20000004

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	2300      	movs	r3, #0
 8002be2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be8:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d00d      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x40>
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	f200 80bd 	bhi.w	8002d74 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x34>
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c02:	e0b7      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c06:	60bb      	str	r3, [r7, #8]
      break;
 8002c08:	e0b7      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c0a:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c0c:	60bb      	str	r3, [r7, #8]
      break;
 8002c0e:	e0b4      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c10:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c18:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c1a:	4b5b      	ldr	r3, [pc, #364]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d04d      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c26:	4b58      	ldr	r3, [pc, #352]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	099b      	lsrs	r3, r3, #6
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	ea02 0800 	and.w	r8, r2, r0
 8002c3e:	ea03 0901 	and.w	r9, r3, r1
 8002c42:	4640      	mov	r0, r8
 8002c44:	4649      	mov	r1, r9
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	014b      	lsls	r3, r1, #5
 8002c50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c54:	0142      	lsls	r2, r0, #5
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	ebb0 0008 	subs.w	r0, r0, r8
 8002c5e:	eb61 0109 	sbc.w	r1, r1, r9
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	018b      	lsls	r3, r1, #6
 8002c6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c70:	0182      	lsls	r2, r0, #6
 8002c72:	1a12      	subs	r2, r2, r0
 8002c74:	eb63 0301 	sbc.w	r3, r3, r1
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	00d9      	lsls	r1, r3, #3
 8002c82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c86:	00d0      	lsls	r0, r2, #3
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	eb12 0208 	adds.w	r2, r2, r8
 8002c90:	eb43 0309 	adc.w	r3, r3, r9
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	0259      	lsls	r1, r3, #9
 8002c9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ca2:	0250      	lsls	r0, r2, #9
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f7fd fac0 	bl	8000238 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e04a      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	ea02 0400 	and.w	r4, r2, r0
 8002cda:	ea03 0501 	and.w	r5, r3, r1
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	014b      	lsls	r3, r1, #5
 8002cec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cf0:	0142      	lsls	r2, r0, #5
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	1b00      	subs	r0, r0, r4
 8002cf8:	eb61 0105 	sbc.w	r1, r1, r5
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	018b      	lsls	r3, r1, #6
 8002d06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d0a:	0182      	lsls	r2, r0, #6
 8002d0c:	1a12      	subs	r2, r2, r0
 8002d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	00d9      	lsls	r1, r3, #3
 8002d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d20:	00d0      	lsls	r0, r2, #3
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	1912      	adds	r2, r2, r4
 8002d28:	eb45 0303 	adc.w	r3, r5, r3
 8002d2c:	f04f 0000 	mov.w	r0, #0
 8002d30:	f04f 0100 	mov.w	r1, #0
 8002d34:	0299      	lsls	r1, r3, #10
 8002d36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d3a:	0290      	lsls	r0, r2, #10
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	f7fd fa74 	bl	8000238 <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4613      	mov	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	60bb      	str	r3, [r7, #8]
      break;
 8002d72:	e002      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d76:	60bb      	str	r3, [r7, #8]
      break;
 8002d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	00f42400 	.word	0x00f42400
 8002d90:	007a1200 	.word	0x007a1200

08002d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e049      	b.n	8002e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fb62 	bl	8001484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 f836 	bl	8002e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a40      	ldr	r2, [pc, #256]	; (8002f58 <TIM_Base_SetConfig+0x114>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e62:	d00f      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3d      	ldr	r2, [pc, #244]	; (8002f5c <TIM_Base_SetConfig+0x118>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3c      	ldr	r2, [pc, #240]	; (8002f60 <TIM_Base_SetConfig+0x11c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d007      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <TIM_Base_SetConfig+0x120>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <TIM_Base_SetConfig+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3a      	ldr	r2, [pc, #232]	; (8002f68 <TIM_Base_SetConfig+0x124>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d108      	bne.n	8002e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2f      	ldr	r2, [pc, #188]	; (8002f58 <TIM_Base_SetConfig+0x114>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d02b      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea4:	d027      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <TIM_Base_SetConfig+0x118>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d023      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <TIM_Base_SetConfig+0x11c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01f      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <TIM_Base_SetConfig+0x120>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01b      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <TIM_Base_SetConfig+0x124>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d017      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <TIM_Base_SetConfig+0x128>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a27      	ldr	r2, [pc, #156]	; (8002f70 <TIM_Base_SetConfig+0x12c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00f      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <TIM_Base_SetConfig+0x130>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <TIM_Base_SetConfig+0x134>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a24      	ldr	r2, [pc, #144]	; (8002f7c <TIM_Base_SetConfig+0x138>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <TIM_Base_SetConfig+0x13c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <TIM_Base_SetConfig+0x114>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d003      	beq.n	8002f3c <TIM_Base_SetConfig+0xf8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <TIM_Base_SetConfig+0x124>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d103      	bne.n	8002f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	615a      	str	r2, [r3, #20]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40010400 	.word	0x40010400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800
 8002f78:	40001800 	.word	0x40001800
 8002f7c:	40001c00 	.word	0x40001c00
 8002f80:	40002000 	.word	0x40002000

08002f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e06d      	b.n	8003078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a30      	ldr	r2, [pc, #192]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2f      	ldr	r2, [pc, #188]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d108      	bne.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a20      	ldr	r2, [pc, #128]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d022      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d01d      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d018      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00e      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a15      	ldr	r2, [pc, #84]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d10c      	bne.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	4313      	orrs	r3, r2
 800305c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40010000 	.word	0x40010000
 8003088:	40010400 	.word	0x40010400
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	40000c00 	.word	0x40000c00
 8003098:	40014000 	.word	0x40014000
 800309c:	40001800 	.word	0x40001800

080030a0 <__libc_init_array>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4d0d      	ldr	r5, [pc, #52]	; (80030d8 <__libc_init_array+0x38>)
 80030a4:	4c0d      	ldr	r4, [pc, #52]	; (80030dc <__libc_init_array+0x3c>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	2600      	movs	r6, #0
 80030ac:	42a6      	cmp	r6, r4
 80030ae:	d109      	bne.n	80030c4 <__libc_init_array+0x24>
 80030b0:	4d0b      	ldr	r5, [pc, #44]	; (80030e0 <__libc_init_array+0x40>)
 80030b2:	4c0c      	ldr	r4, [pc, #48]	; (80030e4 <__libc_init_array+0x44>)
 80030b4:	f000 f820 	bl	80030f8 <_init>
 80030b8:	1b64      	subs	r4, r4, r5
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	2600      	movs	r6, #0
 80030be:	42a6      	cmp	r6, r4
 80030c0:	d105      	bne.n	80030ce <__libc_init_array+0x2e>
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c8:	4798      	blx	r3
 80030ca:	3601      	adds	r6, #1
 80030cc:	e7ee      	b.n	80030ac <__libc_init_array+0xc>
 80030ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d2:	4798      	blx	r3
 80030d4:	3601      	adds	r6, #1
 80030d6:	e7f2      	b.n	80030be <__libc_init_array+0x1e>
 80030d8:	08003130 	.word	0x08003130
 80030dc:	08003130 	.word	0x08003130
 80030e0:	08003130 	.word	0x08003130
 80030e4:	08003134 	.word	0x08003134

080030e8 <memset>:
 80030e8:	4402      	add	r2, r0
 80030ea:	4603      	mov	r3, r0
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d100      	bne.n	80030f2 <memset+0xa>
 80030f0:	4770      	bx	lr
 80030f2:	f803 1b01 	strb.w	r1, [r3], #1
 80030f6:	e7f9      	b.n	80030ec <memset+0x4>

080030f8 <_init>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	bf00      	nop
 80030fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fe:	bc08      	pop	{r3}
 8003100:	469e      	mov	lr, r3
 8003102:	4770      	bx	lr

08003104 <_fini>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	bf00      	nop
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr
